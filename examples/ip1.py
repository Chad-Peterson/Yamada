import json

import networkx as nx
import matplotlib.pyplot as plt
import numpy as np

from yamada import SpatialGraph, generate_isomorphism


# nodes = ['7947','6242','6222','6202','6182','6563','6543','6524','6905','6885','6865','6845','6826','7207','7227','7247','6868','6888','6908','6928','6948','6569','6589','6209','6229','6249','7959','7955','6071','5671','5292','4893','4493','4094','3714','4114','4534','4934','5353','5773','6192','6211','7958','7938','1642','1643','1644','1645','1646','1647','1648','1649','7950','7936','2420','2820','3220','3620','4020','4420','4820','5220','7942','7948','2431','2430','2429','2428','2847','2846','2845','2864','2883','2902','2901','2920','3339','3320','3701','3702','3703','4084','4065','4066','4067','4448','4829','4830','5231','7954','7943','6060','6080','6100','6120','6140','6160','6180','6200','7946','7949','1687','1707','1727','1747','1767','1787','1807','1827','7952','7944','6022','6023','6024','6025','6026','6027','6028','6029','7956','7951','2651','2631','2232','2632','3032','3432','3832','4232','4632','5032','5451','7957','7937','1676','1696','1716','1736','1756','1776','1796','1816','7940','7939','2640','2620','3020','3401','3781','4161','4541','4921','5302','5702','5722','5742','5762','5782','5801','5821','5440','7945','7941','1858','1859','1860','1861','1862','1863','1864','1865','7953']
#
# edges = [('7947', '6242'),('6242', '6222'),('6222', '6202'),('6202', '6182'),('6182', '6563'),('6563', '6543'),('6543', '6524'),('6524', '6905'),('6905', '6885'),('6885', '6865'),('6865', '6845'),('6845', '6826'),('6826', '7207'),('7207', '7227'),('7227', '7247'),('7247', '6868'),('6868', '6888'),('6888', '6908'),('6908', '6928'),('6928', '6948'),('6948', '6569'),('6569', '6589'),('6589', '6209'),('6209', '6229'),('6229', '6249'),('6249', '7959'),('7955', '6071'),('6071', '5671'),('5671', '5292'),('5292', '4893'),('4893', '4493'),('4493', '4094'),('4094', '3714'),('3714', '4114'),('4114', '4534'),('4534', '4934'),('4934', '5353'),('5353', '5773'),('5773', '6192'),('6192', '6211'),('6211', '7958'),('7938', '1642'),('1642', '1643'),('1643', '1644'),('1644', '1645'),('1645', '1646'),('1646', '1647'),('1647', '1648'),('1648', '1649'),('1649', '7950'),('7936', '2420'),('2420', '2820'),('2820', '3220'),('3220', '3620'),('3620', '4020'),('4020', '4420'),('4420', '4820'),('4820', '5220'),('5220', '7942'),('7948', '2431'),('2431', '2430'),('2430', '2429'),('2429', '2428'),('2428', '2847'),('2847', '2846'),('2846', '2845'),('2845', '2864'),('2864', '2883'),('2883', '2902'),('2902', '2901'),('2901', '2920'),('2920', '3339'),('3339', '3320'),('3320', '3701'),('3701', '3702'),('3702', '3703'),('3703', '4084'),('4084', '4065'),('4065', '4066'),('4066', '4067'),('4067', '4448'),('4448', '4829'),('4829', '4830'),('4830', '5231'),('5231', '7954'),('7943', '6060'),('6060', '6080'),('6080', '6100'),('6100', '6120'),('6120', '6140'),('6140', '6160'),('6160', '6180'),('6180', '6200'),('6200', '7946'),('7949', '1687'),('1687', '1707'),('1707', '1727'),('1727', '1747'),('1747', '1767'),('1767', '1787'),('1787', '1807'),('1807', '1827'),('1827', '7952'),('7944', '6022'),('6022', '6023'),('6023', '6024'),('6024', '6025'),('6025', '6026'),('6026', '6027'),('6027', '6028'),('6028', '6029'),('6029', '7956'),('7951', '2651'),('2651', '2631'),('2631', '2232'),('2232', '2632'),('2632', '3032'),('3032', '3432'),('3432', '3832'),('3832', '4232'),('4232', '4632'),('4632', '5032'),('5032', '5451'),('5451', '7957'),('7937', '1676'),('1676', '1696'),('1696', '1716'),('1716', '1736'),('1736', '1756'),('1756', '1776'),('1776', '1796'),('1796', '1816'),('1816', '7940'),('7939', '2640'),('2640', '2620'),('2620', '3020'),('3020', '3401'),('3401', '3781'),('3781', '4161'),('4161', '4541'),('4541', '4921'),('4921', '5302'),('5302', '5702'),('5702', '5722'),('5722', '5742'),('5742', '5762'),('5762', '5782'),('5782', '5801'),('5801', '5821'),('5821', '5440'),('5440', '7945'),('7941', '1858'),('1858', '1859'),('1859', '1860'),('1860', '1861'),('1861', '1862'),('1862', '1863'),('1863', '1864'),('1864', '1865'),('1865', '7953'),('7938', '7936'),('7938', '7937'),('7941', '7939'),('7941', '7940'),('7944', '7942'),('7944', '7943'),('7947', '7945'),('7947', '7946'),('7950', '7948'),('7950', '7949'),('7953', '7951'),('7953', '7952'),('7956', '7954'),('7956', '7955'),('7959', '7957'),('7959', '7958')]
#
# node_positions = np.array([[80.0, 80.0, 30.0],[78.94736842105263, 78.94736842105263, 31.578947368421055],[78.94736842105263, 73.6842105263158, 31.578947368421055],[78.94736842105263, 68.42105263157896, 31.578947368421055],[78.94736842105263, 63.15789473684211, 31.578947368421055],[84.21052631578948, 57.89473684210527, 36.8421052631579],[84.21052631578948, 52.631578947368425, 36.8421052631579],[84.21052631578948, 47.36842105263158, 42.10526315789474],[89.47368421052633, 42.10526315789474, 47.36842105263158],[89.47368421052633, 36.8421052631579, 47.36842105263158],[89.47368421052633, 31.578947368421055, 47.36842105263158],[89.47368421052633, 26.315789473684212, 47.36842105263158],[89.47368421052633, 21.05263157894737, 52.631578947368425],[94.73684210526316, 15.789473684210527, 57.89473684210527],[94.73684210526316, 21.05263157894737, 57.89473684210527],[94.73684210526316, 26.315789473684212, 57.89473684210527],[89.47368421052633, 31.578947368421055, 63.15789473684211],[89.47368421052633, 36.8421052631579, 63.15789473684211],[89.47368421052633, 42.10526315789474, 63.15789473684211],[89.47368421052633, 47.36842105263158, 63.15789473684211],[89.47368421052633, 52.631578947368425, 63.15789473684211],[84.21052631578948, 57.89473684210527, 68.42105263157896],[84.21052631578948, 63.15789473684211, 68.42105263157896],[78.94736842105263, 68.42105263157896, 68.42105263157896],[78.94736842105263, 73.6842105263158, 68.42105263157896],[78.94736842105263, 78.94736842105263, 68.42105263157896],[80.0, 80.0, 70.0],[80.0, 30.0, 80.0],[78.94736842105263, 31.578947368421055, 78.94736842105263],[73.6842105263158, 31.578947368421055, 78.94736842105263],[68.42105263157896, 36.8421052631579, 84.21052631578948],[63.15789473684211, 36.8421052631579, 89.47368421052633],[57.89473684210527, 36.8421052631579, 89.47368421052633],[52.631578947368425, 36.8421052631579, 94.73684210526316],[47.36842105263158, 42.10526315789474, 94.73684210526316],[52.631578947368425, 42.10526315789474, 94.73684210526316],[57.89473684210527, 47.36842105263158, 94.73684210526316],[63.15789473684211, 47.36842105263158, 94.73684210526316],[68.42105263157896, 52.631578947368425, 89.47368421052633],[73.6842105263158, 57.89473684210527, 89.47368421052633],[78.94736842105263, 63.15789473684211, 84.21052631578948],[78.94736842105263, 68.42105263157896, 78.94736842105263],[80.0, 70.0, 80.0],[20.0, 20.0, 30.0],[21.05263157894737, 21.05263157894737, 31.578947368421055],[21.05263157894737, 21.05263157894737, 36.8421052631579],[21.05263157894737, 21.05263157894737, 42.10526315789474],[21.05263157894737, 21.05263157894737, 47.36842105263158],[21.05263157894737, 21.05263157894737, 52.631578947368425],[21.05263157894737, 21.05263157894737, 57.89473684210527],[21.05263157894737, 21.05263157894737, 63.15789473684211],[21.05263157894737, 21.05263157894737, 68.42105263157896],[20.0, 20.0, 70.0],[30.0, 20.0, 20.0],[31.578947368421055, 21.05263157894737, 21.05263157894737],[36.8421052631579, 21.05263157894737, 21.05263157894737],[42.10526315789474, 21.05263157894737, 21.05263157894737],[47.36842105263158, 21.05263157894737, 21.05263157894737],[52.631578947368425, 21.05263157894737, 21.05263157894737],[57.89473684210527, 21.05263157894737, 21.05263157894737],[63.15789473684211, 21.05263157894737, 21.05263157894737],[68.42105263157896, 21.05263157894737, 21.05263157894737],[70.0, 20.0, 20.0],[30.0, 20.0, 80.0],[31.578947368421055, 21.05263157894737, 78.94736842105263],[31.578947368421055, 21.05263157894737, 73.6842105263158],[31.578947368421055, 21.05263157894737, 68.42105263157896],[31.578947368421055, 21.05263157894737, 63.15789473684211],[36.8421052631579, 26.315789473684212, 57.89473684210527],[36.8421052631579, 26.315789473684212, 52.631578947368425],[36.8421052631579, 26.315789473684212, 47.36842105263158],[36.8421052631579, 31.578947368421055, 42.10526315789474],[36.8421052631579, 36.8421052631579, 36.8421052631579],[36.8421052631579, 42.10526315789474, 31.578947368421055],[36.8421052631579, 42.10526315789474, 26.315789473684212],[36.8421052631579, 47.36842105263158, 21.05263157894737],[42.10526315789474, 52.631578947368425, 15.789473684210527],[42.10526315789474, 47.36842105263158, 21.05263157894737],[47.36842105263158, 42.10526315789474, 26.315789473684212],[47.36842105263158, 42.10526315789474, 31.578947368421055],[47.36842105263158, 42.10526315789474, 36.8421052631579],[52.631578947368425, 36.8421052631579, 42.10526315789474],[52.631578947368425, 31.578947368421055, 47.36842105263158],[52.631578947368425, 31.578947368421055, 52.631578947368425],[52.631578947368425, 31.578947368421055, 57.89473684210527],[57.89473684210527, 26.315789473684212, 63.15789473684211],[63.15789473684211, 21.05263157894737, 68.42105263157896],[63.15789473684211, 21.05263157894737, 73.6842105263158],[68.42105263157896, 21.05263157894737, 78.94736842105263],[70.0, 20.0, 80.0],[80.0, 30.0, 20.0],[78.94736842105263, 31.578947368421055, 21.05263157894737],[78.94736842105263, 36.8421052631579, 21.05263157894737],[78.94736842105263, 42.10526315789474, 21.05263157894737],[78.94736842105263, 47.36842105263158, 21.05263157894737],[78.94736842105263, 52.631578947368425, 21.05263157894737],[78.94736842105263, 57.89473684210527, 21.05263157894737],[78.94736842105263, 63.15789473684211, 21.05263157894737],[78.94736842105263, 68.42105263157896, 21.05263157894737],[80.0, 70.0, 20.0],[20.0, 30.0, 80.0],[21.05263157894737, 31.578947368421055, 78.94736842105263],[21.05263157894737, 36.8421052631579, 78.94736842105263],[21.05263157894737, 42.10526315789474, 78.94736842105263],[21.05263157894737, 47.36842105263158, 78.94736842105263],[21.05263157894737, 52.631578947368425, 78.94736842105263],[21.05263157894737, 57.89473684210527, 78.94736842105263],[21.05263157894737, 63.15789473684211, 78.94736842105263],[21.05263157894737, 68.42105263157896, 78.94736842105263],[20.0, 70.0, 80.0],[80.0, 20.0, 30.0],[78.94736842105263, 21.05263157894737, 31.578947368421055],[78.94736842105263, 21.05263157894737, 36.8421052631579],[78.94736842105263, 21.05263157894737, 42.10526315789474],[78.94736842105263, 21.05263157894737, 47.36842105263158],[78.94736842105263, 21.05263157894737, 52.631578947368425],[78.94736842105263, 21.05263157894737, 57.89473684210527],[78.94736842105263, 21.05263157894737, 63.15789473684211],[78.94736842105263, 21.05263157894737, 68.42105263157896],[80.0, 20.0, 70.0],[30.0, 80.0, 80.0],[31.578947368421055, 78.94736842105263, 78.94736842105263],[31.578947368421055, 73.6842105263158, 78.94736842105263],[26.315789473684212, 73.6842105263158, 84.21052631578948],[31.578947368421055, 73.6842105263158, 84.21052631578948],[36.8421052631579, 73.6842105263158, 84.21052631578948],[42.10526315789474, 73.6842105263158, 84.21052631578948],[47.36842105263158, 73.6842105263158, 84.21052631578948],[52.631578947368425, 73.6842105263158, 84.21052631578948],[57.89473684210527, 73.6842105263158, 84.21052631578948],[63.15789473684211, 73.6842105263158, 84.21052631578948],[68.42105263157896, 78.94736842105263, 78.94736842105263],[70.0, 80.0, 80.0],[20.0, 30.0, 20.0],[21.05263157894737, 31.578947368421055, 21.05263157894737],[21.05263157894737, 36.8421052631579, 21.05263157894737],[21.05263157894737, 42.10526315789474, 21.05263157894737],[21.05263157894737, 47.36842105263158, 21.05263157894737],[21.05263157894737, 52.631578947368425, 21.05263157894737],[21.05263157894737, 57.89473684210527, 21.05263157894737],[21.05263157894737, 63.15789473684211, 21.05263157894737],[21.05263157894737, 68.42105263157896, 21.05263157894737],[20.0, 70.0, 20.0],[30.0, 80.0, 20.0],[31.578947368421055, 78.94736842105263, 21.05263157894737],[31.578947368421055, 73.6842105263158, 21.05263157894737],[36.8421052631579, 73.6842105263158, 21.05263157894737],[42.10526315789474, 68.42105263157896, 26.315789473684212],[47.36842105263158, 63.15789473684211, 26.315789473684212],[52.631578947368425, 57.89473684210527, 26.315789473684212],[57.89473684210527, 52.631578947368425, 26.315789473684212],[63.15789473684211, 47.36842105263158, 26.315789473684212],[68.42105263157896, 42.10526315789474, 31.578947368421055],[73.6842105263158, 42.10526315789474, 31.578947368421055],[73.6842105263158, 47.36842105263158, 31.578947368421055],[73.6842105263158, 52.631578947368425, 31.578947368421055],[73.6842105263158, 57.89473684210527, 31.578947368421055],[73.6842105263158, 63.15789473684211, 31.578947368421055],[73.6842105263158, 68.42105263157896, 26.315789473684212],[73.6842105263158, 73.6842105263158, 26.315789473684212],[68.42105263157896, 78.94736842105263, 21.05263157894737],[70.0, 80.0, 20.0],[20.0, 80.0, 30.0],[21.05263157894737, 78.94736842105263, 31.578947368421055],[21.05263157894737, 78.94736842105263, 36.8421052631579],[21.05263157894737, 78.94736842105263, 42.10526315789474],[21.05263157894737, 78.94736842105263, 47.36842105263158],[21.05263157894737, 78.94736842105263, 52.631578947368425],[21.05263157894737, 78.94736842105263, 57.89473684210527],[21.05263157894737, 78.94736842105263, 63.15789473684211],[21.05263157894737, 78.94736842105263, 68.42105263157896],[20.0, 80.0, 70.0]])

with open('output_data.json','r') as f:
      data = json.load(f)

edges, nodes, node_positions = data['0']

indices = []
sgs = []
sgds = []
yps = []

# for i, (edges, nodes, node_positions) in data.items():

edges = [(a,b) for a,b in edges]

pos = {node: np.array(position) for node, position in zip(nodes, node_positions)}

g = nx.Graph()
g.add_nodes_from(nodes)
g.add_edges_from(edges)


# node_xyz = np.array([pos[v] for v in sorted(g)])
# edge_xyz = np.array([(pos[u], pos[v]) for u, v in g.edges()])
#
#
# fig = plt.figure()
# ax = fig.add_subplot(111, projection="3d")
#
# # Plot the nodes - alpha is scaled by "depth" automatically
# ax.scatter(*node_xyz.T, s=100, ec="w")
#
# for vizedge in edge_xyz:
#     ax.plot(*vizedge.T, color="tab:gray")
#
# plt.show()

g, pos = generate_isomorphism(g, pos, n=2, rotate=False)


node_xyz = np.array([pos[v] for v in sorted(g)])
edge_xyz = np.array([(pos[u], pos[v]) for u, v in g.edges()])


# fig = plt.figure()
# ax = fig.add_subplot(111, projection="3d")
#
# ax.scatter(*node_xyz.T, s=100, ec="w")
#
# for vizedge in edge_xyz:
#     ax.plot(*vizedge.T, color="tab:gray")
#
# plt.show()

# sg = SpatialGraph(nodes=nodes, edges=edges, node_positions=node_positions)
sg = SpatialGraph(nodes=sorted(list(g.nodes)), edges=list(g.edges), node_positions=node_xyz)
sg.plot()

sgd = sg.create_spatial_graph_diagram()

if len(sgd.crossings) < 8:

    yp = sgd.normalized_yamada_polynomial()
    print(yp)

    indices.append(i)
    sgs.append(sg)
    sgds.append(sgd)
    yps.append(yp)

else:
    print('Too many crossings')


outputs_dict = {'indices': indices, 'sgs': sgs, 'sgds': sgds, 'yps': yps}
with open('new_output_data.json', 'w') as f:
    json.dump(outputs_dict, f)
